<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dipBirdie</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phealth = 50; //unit health
atkspd = 2; //attacks per second
isPlayer = true; //not used yet, checks if unit is players
alarm[0] = -1; //tells game on collision that theres not an attack currently happening
image_speed = 0.2;
mining = 0; //used to tell game if a rock is taken

// movement speeds based on monitor width
if(gwidth &gt;= 1000)
{
    pspd = 1;
}
if(gwidth &gt;= 2000)
{
    pspd = 2;
}
if(gwidth &lt; 1000)
{
    pspd = .5;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var crit = irandom(100) // 0-99, 99 is a crit attack
if(instance_exists(enemy)) //make sure enemy didnt die before you do damage
{
    if(crit &lt; 99) //if didnt get a crit (1% chance)
    {
        enemy.ehealth = enemy.ehealth - irandom_range(10,20);  
    }
    if(crit &gt;= 99) //double damage possible with crit
    {
        enemy.ehealth = enemy.ehealth - irandom_range(20,40); 
    }
}
alarm[0] = -1; //tell collision its time to start timer for next attack
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(obj_en_castle))
{ 
    x = x - pspd; // move left at the speed assigned
}
else
{
    image_index = 0;
    image_speed = 0;
}

//move based on screen width
if(gwidth &gt;= 1000)
{
    pspd = 1;
}
if(gwidth &gt;= 2000)
{
    pspd = 2;
}
if(gwidth &lt; 1000)
{
    pspd = .5;
}

sprite_index = spr_dipBirdie;//once moving make sure not in attack animation

if(distance_to_object(obj_enTest) &lt; 64)
{
    pspd = 0; // when running into enemy stop moving
    sprite_index = spr_dipBirdie_atk; //use attack animation
    image_speed = .5; //only 15 frames per second on the animation (half room speed)
    
    enemy = instance_nearest(x,y,obj_enTest);  //used to refer to collided target in other events
    
    if(alarm[0] == -1) //if theres not an attack currently happening
    {
        alarm[0] = room_speed*atkspd; //attack after waiting your attack speed time
    } 
}

if(distance_to_object(obj_en_castle) &lt;=64)
{
    pspd = 0; // when running into enemy stop moving
    sprite_index = spr_dipBirdie_atk; //use attack animation
    image_speed = .5; //only 15 frames per second on the animation (half room speed)
    
    enemy = instance_nearest(x,y,obj_en_castle);  //used to refer to collided target in other events
    
    if(alarm[0] == -1) //if theres not an attack currently happening
    {
        alarm[0] = room_speed*atkspd; //attack after waiting your attack speed time
    } 
}

if(phealth &lt;= 0) //if dead
{
    if(place_meeting(x,y,obj_p_rock)) //if its mining tell the rock its open for a new unit
    {
        enemy.taken = 0;
    }  
    instance_destroy(); //remove unit from game
}

if(x &lt;= -32) //walk off screen? Get removed.
{
    instance_destroy();
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
